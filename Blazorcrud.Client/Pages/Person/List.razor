@page "/person/{Page}"
@inject Services.IPersonService PersonService
@inject Services.IUserService UserService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Blazorcrud.Client.Shared.PageHistoryState PageHistoryState
@inject Microsoft.JSInterop.IJSRuntime JS
@inject IPrintingService PrintingService

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons

<h1>Lista Grupos-Amb</h1>
<br/>

<div class="row mb-3">
    <div class="col-md-7">
        @if(LoggedIn)
        { 
            <NavLink href="/person/createperson" class="btn btn-sm btn-success mb-2">Novo</NavLink>
        }
    </div>
    <div class="input-group col-md-5 text-md-right">
        <input name="PersonSearchInput" type="text" class="form-control" placeholder="FILTRO: CÓDIGO / GRUPO AMB" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
        
        <div class="input-group-btn">
            <button name="PersonSearchButton" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="PersonSearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="PersonPrintButton" class="btn btn-default" @onclick="PrintClick">
                <i class="oi oi-print" title="print" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (people == null)
{
    <p><em>Loading...</em></p>
}
else
{
      <div class="col">
        <table class="table table-striped" id="printable-table">
            <thead>
                <tr>
                    <th style="width:25%">GroupNumber</th>
                    <th style="width:25%">Description</th>
                    <th style="width:15%">EntryDate</th>
                    <th style="width:30%">UserName</th>
                    <th style="width:5%"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in people.Results)
                {
                    <tr>
                        <td>@person.GroupNumber</td>
                        <td>@person.Description</td>
                        <td>@person.EntryDate</td>
                        <td>@person.UserName</td>
                        <td style="white-space: nowrap">
                            <NavLink href="@($"/person/viewperson/{person.PersonId}")" class="oi oi-eye text-primary mr-3 nounderline"></NavLink>
                            @if (LoggedIn && (person.UserName == CurrentUser.Username || CurrentUser.Username == "superadmin"))
                            {
                                <NavLink href="@($"/person/updateperson/{person.PersonId}")" class="oi oi-pencil text-warning mr-2 nounderline"></NavLink>
                            
                                    @if (person.IsDeleting) 
                                    {
                                        <button @onclick="@(() => DeletePerson(person))" disabled="@person.IsDeleting" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                            <span class="spinner-border spinner-border-sm"></span>
                                        </button>
                                    }
                                    else
                                    {
                                    <button @onclick="@(() => DeletePerson(person))" disabled="@person.IsDeleting" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                            <span></span>
                                        </button>
                                    }
                            }
                        </td>
                    </tr> 
                }
            </tbody>
        </table>
        <Pager Result=@people PageChanged=PagerPageChanged />
    </div>
}

@code {
    [Parameter]
    public string Page { get; set;} = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;
    private PagedResult<Person> people;


    public bool LoggedIn
    {
        get {return UserService.User != null;}
    }
    public User CurrentUser
    {
        get { return UserService.User; }
    }
    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory(UriHelper.Uri);

        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        people = await PersonService.GetPeople(null, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            people = await PersonService.GetPeople(null, Page);
            return;
        }
        people = await PersonService.GetPeople(SearchTerm, Page);
        StateHasChanged();
    }


    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        people = await PersonService.GetPeople(SearchTerm, Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/person/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    private async void DeletePerson(Person _person)
    {
        var person = _person;
        person.IsDeleting = true;
        await PersonService.DeletePerson(person.PersonId);
        people = await PersonService.GetPeople(null, Page);
        person.IsDeleting = false;
        StateHasChanged();
    }

    public void PrintClick()
    {
        
        PrintingService.Print("printable-table", PrintType.Html);
    }
}