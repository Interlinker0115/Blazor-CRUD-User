@implements IDisposable
@inject IUserService UserService
@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark" style="border-radius: 0.0rem;">
    <div class="container-fluid">
        <img src="/imagem/LogoGermed.png" class="img-fluid" />
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/user/1">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> User
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/person/1">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Description
            </NavLink>
        </div>


        <div class="nav-item px-3 ml-auto">
            @if (LoggedIn)
            {
                <NavLink href="/user/logout" class="nav-item nav-link"><span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout</NavLink>
                
            }
            else
            {
                <NavLink href="/user/login" class="nav-item nav-link"><span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login</NavLink>
            }

        </div>
        @if (LoggedIn)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="#">
                    <span class="bi bi-person-nav-menu" aria-hidden="true"></span> @UserService.User.Username
                </NavLink>
                
            </div>
        }

    </nav>
</div>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    public bool LoggedIn
    {
        get { return UserService.User != null; }
    }
}

